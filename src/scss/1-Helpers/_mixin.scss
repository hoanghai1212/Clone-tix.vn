@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin flexbox(
  $flex: flex,
  $align: null,
  $justify: null,
  $direction: null,
  $wrap: null,
  $order: null
) {
  display: $flex;
  align-items: $align;
  justify-content: $justify;
  flex-direction: $direction;
  flex-wrap: $wrap;
  order: $order;
}

@mixin flexCenter() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin centerAbsolute($direction: "both") {
  position: absolute;
  @if $direction == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @if $direction == "left" {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $direction == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin box-shadow(
  $x: 0,
  $y: 0,
  $blur: 0,
  $spread: 0,
  $color: black,
  $inset: false
) {
  @if $inset {
    box-shadow: inset
      spacing($x)
      spacing($y)
      spacing($blur)
      spacing($spread)
      $color;
  } @else {
    box-shadow: spacing($x) spacing($y) spacing($blur) spacing($spread) $color;
  }
}

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number
    {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

// Positioning helpers
@mixin absolute($args: "", $transX: null, $transY: null) {
  @include position(absolute, $args);

  @if ($transX and $transY) {
    transform: translate($transX, $transY);
  } @else if ($transX) {
    transform: translateX($transX);
  } @else if ($transY) {
    transform: translatey($transY);
  }
}

@mixin fixed($args: "") {
  @include position(fixed, $args);
}

@mixin relative($args: "") {
  @include position(relative, $args);
}

@mixin minWidth($breakpoint) {
  @media only screen and(min-width: $breakpoints) {
    @content;
  }
}
@mixin maxWidth($breakpoint) {
  @media only screen and(max-width: $breakpoints) {
    @content;
  }
}
@mixin truncateText($width) {
  width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin margin-padding(
  $m-direction: all,
  $m-amount: null,
  $p-direction: all,
  $p-amount: null
) {
  @if $m-direction == all {
    margin: $m-amount;
  } @else {
    margin-#{$m-direction}: $m-amount;
  }
  @if $p-direction == all {
    padding: $p-amount;
  } @else {
    padding-#{$p-direction}: $p-amount;
  }
}

@mixin font($fsz: null, $color: null, $fwe: null, $lhe: null) {
  @if ($fsz) {
    font-size:  $fsz;
  }
  @if ($color) {
    color: $color;
  }
  @if ($fwe) {
    font-weight: fw($fwe);
  }
  @if ($lhe) {
    line-height: $lhe;
  }
}

@mixin appearance(
  $cursor: pointer,
  $property: all,
  $time: 0.2s,
  $borrad: spacing(0.4),
  $bg: null
) {
  cursor: $cursor;
  transition: $property $time;
  border-radius: $borrad;
  background: $bg;
}

@mixin container($m-w: spacing(94)) {
  max-width: $m-w;
  margin: 0 auto;
}

@mixin blockHeader {
  background: url(../../../build/images/back-news.png) no-repeat top center;
  background-size: contain;
  padding-top: spacing(12);
  padding-bottom: spacing(4);
}

@mixin custom-scrollbar {
  overflow-y: auto;
  overflow-x: hidden;
  // for firefox
  scrollbar-color: bc("silver") bc("gainsboro");
  scrollbar-width: thin;

  // for chrome
  &::-webkit-scrollbar {
    width: spacing(0.5);
  }

  &::-webkit-scrollbar-track-piece {
    background: bc("gainsboro");
    border-radius: 0 spacing(0.4) spacing(0.4) 0;
  }

  &::-webkit-scrollbar-thumb {
    background: bc("silver");
    border-radius: spacing(0.4);
  }
}

@mixin screen($size, $type: max, $pixels: br("sm")) {
  @if $size == "sm" {
    @media screen and (#{$type}-width: br("sm")) {
      @content;
    }
  } @else if $size == "md" {
    @media screen and (#{$type}-width: br("md")) {
      @content;
    }
  } @else if $size == "lg" {
    @media screen and (#{$type}-width: br("lg")) {
      @content;
    }
  } @else if $size == "x-lg" {
    @media screen and (#{$type}-width: br("x-lg")) {
      @content;
    }
  } @else if $size == "custom" {
    @media screen and (#{$type}-width: $pixels + px) {
      @content;
    }
  } @else {
    @content;
  }
}
